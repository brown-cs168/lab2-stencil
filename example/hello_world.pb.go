// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello_world.proto

// The package should match the go package you are in

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// GreetRequest requires a string
type GreetRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetRequest) Reset()         { *m = GreetRequest{} }
func (m *GreetRequest) String() string { return proto.CompactTextString(m) }
func (*GreetRequest) ProtoMessage()    {}
func (*GreetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09d5cabe4ebc959, []int{0}
}

func (m *GreetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetRequest.Unmarshal(m, b)
}
func (m *GreetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetRequest.Marshal(b, m, deterministic)
}
func (m *GreetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetRequest.Merge(m, src)
}
func (m *GreetRequest) XXX_Size() int {
	return xxx_messageInfo_GreetRequest.Size(m)
}
func (m *GreetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreetRequest proto.InternalMessageInfo

func (m *GreetRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// GreetReply requires a string
type GreetReply struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetReply) Reset()         { *m = GreetReply{} }
func (m *GreetReply) String() string { return proto.CompactTextString(m) }
func (*GreetReply) ProtoMessage()    {}
func (*GreetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a09d5cabe4ebc959, []int{1}
}

func (m *GreetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetReply.Unmarshal(m, b)
}
func (m *GreetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetReply.Marshal(b, m, deterministic)
}
func (m *GreetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetReply.Merge(m, src)
}
func (m *GreetReply) XXX_Size() int {
	return xxx_messageInfo_GreetReply.Size(m)
}
func (m *GreetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GreetReply proto.InternalMessageInfo

func (m *GreetReply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*GreetRequest)(nil), "example.GreetRequest")
	proto.RegisterType((*GreetReply)(nil), "example.GreetReply")
}

func init() { proto.RegisterFile("hello_world.proto", fileDescriptor_a09d5cabe4ebc959) }

var fileDescriptor_a09d5cabe4ebc959 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x48, 0xcd, 0xc9,
	0xc9, 0x8f, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f,
	0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x55, 0x52, 0xe0, 0xe2, 0x71, 0x2f, 0x4a, 0x4d, 0x2d, 0x09,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x94, 0xb8, 0xb8, 0xa0, 0x2a, 0x0a, 0x72, 0x2a, 0x85,
	0x44, 0xb8, 0x58, 0x8b, 0x40, 0x0c, 0xa8, 0x0a, 0x08, 0xc7, 0xc8, 0x91, 0x8b, 0x1d, 0xac, 0x26,
	0xb5, 0x48, 0xc8, 0x8c, 0x8b, 0x03, 0xa2, 0x3c, 0xc0, 0x59, 0x48, 0x54, 0x0f, 0x6a, 0x8d, 0x1e,
	0xb2, 0x1d, 0x52, 0xc2, 0xe8, 0xc2, 0x05, 0x39, 0x95, 0x49, 0x6c, 0x60, 0x87, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x8b, 0xd5, 0x49, 0xe5, 0xad, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	GreetRPC(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GreetRPC(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetReply, error) {
	out := new(GreetReply)
	err := c.cc.Invoke(ctx, "/example.Greeter/GreetRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	GreetRPC(context.Context, *GreetRequest) (*GreetReply, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) GreetRPC(ctx context.Context, req *GreetRequest) (*GreetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetRPC not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_GreetRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GreetRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Greeter/GreetRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GreetRPC(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetRPC",
			Handler:    _Greeter_GreetRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello_world.proto",
}
